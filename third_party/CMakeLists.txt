cmake_minimum_required(VERSION 3.0)

set(JMESPATH_JSON_RELATIVE_INCLUDE_DIR "third_party/json")
set(JMESPATH_JSON_SOURCE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/json/single_include/nlohmann/json.hpp")
set(JMESPATH_SYMLINK_THIRD_PARTY_TARGET_NAME "symlink_third_party"
    CACHE STRING "")
set(JSON_SOURCE_INSTALL_PATH
    "${JMESPATH_INCLUDE_PREFIX_DIR}/${JMESPATH_JSON_RELATIVE_INCLUDE_DIR}")
if (UNIX)
    set(JMESPATH_SYMLINK_FILE_OPERATION "create_symlink")
elseif (WIN32)
    set(JMESPATH_SYMLINK_FILE_OPERATION "copy")
endif ()
add_custom_target(${JMESPATH_SYMLINK_THIRD_PARTY_TARGET_NAME}
    ${CMAKE_COMMAND} -E "make_directory"
    "${CMAKE_CURRENT_SOURCE_DIR}/jmespath/${JMESPATH_JSON_RELATIVE_INCLUDE_DIR}"
    COMMAND ${CMAKE_COMMAND} -E ${JMESPATH_SYMLINK_FILE_OPERATION}
    ${JMESPATH_JSON_SOURCE_PATH}
    "${CMAKE_CURRENT_SOURCE_DIR}/jmespath/${JMESPATH_JSON_RELATIVE_INCLUDE_DIR}/json.hpp")
list(APPEND JMESPATH_SYSTEM_INCLUDE_DIRECTORIES
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
set(JMESPATH_SYSTEM_INCLUDE_DIRECTORIES
    ${JMESPATH_SYSTEM_INCLUDE_DIRECTORIES} PARENT_SCOPE)
install(FILES "${JMESPATH_JSON_SOURCE_PATH}/json.hpp"
    DESTINATION ${JSON_SOURCE_INSTALL_PATH})

add_library(FakeIt INTERFACE IMPORTED GLOBAL)
set(FAKEIT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/FakeIt)
set_target_properties(FakeIt PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
    "${FAKEIT_DIR}/include;${FAKEIT_DIR}/config/catch")

add_library(Catch2 INTERFACE IMPORTED GLOBAL)
set(CATCH2_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Catch2)
set_target_properties(Catch2 PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
    "${CATCH2_DIR}/single_include/catch2")
